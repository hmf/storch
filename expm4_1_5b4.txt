nohup: ignoring input
[info] compiling 1 Scala source to /workspaces/storch/out/examples/compile.dest/classes ...
[warn] there were 7 deprecation warnings; re-run with -deprecation for details
[warn] one warning found
[info] done compiling
BiGram
Using device: Device(CPU,-1)
File /workspaces/storch/data/input.txt already exists.
chars = 
,  , !, $, &, ', ,, -, ., 3, :, ;, ?, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
vocab_size = 65
"BiGram!" = "BiGram!"
inputs:
ArraySeq(16, 8)
tensor dtype=int64, shape=[16, 8], device=CPU 
[[24, 43, 58, ..., 1, 46, 43],
 [44, 53, 56, ..., 46, 39, 58],
 [52, 58, 1, ..., 39, 58, 1],
 ...,
 [56, 53, 63, ..., 47, 42, 1],
 [39, 51, 1, ..., 56, 39, 47],
 [17, 24, 21, ..., 14, 17, 32]]
targets:
ArraySeq(16, 8)
tensor dtype=int64, shape=[16, 8], device=CPU 
[[43, 58, 5, ..., 46, 43, 39],
 [53, 56, 1, ..., 39, 58, 1],
 [58, 1, 58, ..., 58, 1, 46],
 ...,
 [53, 63, 1, ..., 42, 1, 57],
 [51, 1, 39, ..., 39, 47, 42],
 [24, 21, 38, ..., 17, 32, 20]]
----
xb:
Let's he
.
for that
yb:
et's hea
.
or that 
when input is [24] the target: 43
when input is [24, 43] the target: 58
when input is [24, 43, 58] the target: 5
when input is [24, 43, 58, 5] the target: 57
when input is [24, 43, 58, 5, 57] the target: 1
when input is [24, 43, 58, 5, 57, 1] the target: 46
when input is [24, 43, 58, 5, 57, 1, 46] the target: 43
when input is [24, 43, 58, 5, 57, 1, 46, 43] the target: 39
when input is [44] the target: 53
when input is [44, 53] the target: 56
when input is [44, 53, 56] the target: 1
when input is [44, 53, 56, 1] the target: 58
when input is [44, 53, 56, 1, 58] the target: 46
when input is [44, 53, 56, 1, 58, 46] the target: 39
when input is [44, 53, 56, 1, 58, 46, 39] the target: 58
when input is [44, 53, 56, 1, 58, 46, 39, 58] the target: 1
when input is [52] the target: 58
when input is [52, 58] the target: 1
when input is [52, 58, 1] the target: 58
when input is [52, 58, 1, 58] the target: 46
when input is [52, 58, 1, 58, 46] the target: 39
when input is [52, 58, 1, 58, 46, 39] the target: 58
when input is [52, 58, 1, 58, 46, 39, 58] the target: 1
when input is [52, 58, 1, 58, 46, 39, 58, 1] the target: 46
when input is [25] the target: 17
when input is [25, 17] the target: 27
when input is [25, 17, 27] the target: 10
when input is [25, 17, 27, 10] the target: 0
when input is [25, 17, 27, 10, 0] the target: 21
when input is [25, 17, 27, 10, 0, 21] the target: 1
when input is [25, 17, 27, 10, 0, 21, 1] the target: 54
when input is [25, 17, 27, 10, 0, 21, 1, 54] the target: 39
when input is [57] the target: 43
when input is [57, 43] the target: 60
when input is [57, 43, 60] the target: 43
when input is [57, 43, 60, 43] the target: 52
when input is [57, 43, 60, 43, 52] the target: 1
when input is [57, 43, 60, 43, 52, 1] the target: 63
when input is [57, 43, 60, 43, 52, 1, 63] the target: 43
when input is [57, 43, 60, 43, 52, 1, 63, 43] the target: 39
when input is [60] the target: 43
when input is [60, 43] the target: 42
when input is [60, 43, 42] the target: 8
when input is [60, 43, 42, 8] the target: 0
when input is [60, 43, 42, 8, 0] the target: 25
when input is [60, 43, 42, 8, 0, 25] the target: 63
when input is [60, 43, 42, 8, 0, 25, 63] the target: 1
when input is [60, 43, 42, 8, 0, 25, 63, 1] the target: 45
when input is [56] the target: 42
when input is [56, 42] the target: 5
when input is [56, 42, 5] the target: 57
when input is [56, 42, 5, 57] the target: 1
when input is [56, 42, 5, 57, 1] the target: 57
when input is [56, 42, 5, 57, 1, 57] the target: 39
when input is [56, 42, 5, 57, 1, 57, 39] the target: 49
when input is [56, 42, 5, 57, 1, 57, 39, 49] the target: 43
when input is [43] the target: 57
when input is [43, 57] the target: 58
when input is [43, 57, 58] the target: 63
when input is [43, 57, 58, 63] the target: 6
when input is [43, 57, 58, 63, 6] the target: 1
when input is [43, 57, 58, 63, 6, 1] the target: 58
when input is [43, 57, 58, 63, 6, 1, 58] the target: 46
when input is [43, 57, 58, 63, 6, 1, 58, 46] the target: 47
when input is [43] the target: 1
when input is [43, 1] the target: 51
when input is [43, 1, 51] the target: 39
when input is [43, 1, 51, 39] the target: 63
when input is [43, 1, 51, 39, 63] the target: 1
when input is [43, 1, 51, 39, 63, 1] the target: 40
when input is [43, 1, 51, 39, 63, 1, 40] the target: 43
when input is [43, 1, 51, 39, 63, 1, 40, 43] the target: 1
when input is [58] the target: 46
when input is [58, 46] the target: 43
when input is [58, 46, 43] the target: 1
when input is [58, 46, 43, 1] the target: 43
when input is [58, 46, 43, 1, 43] the target: 39
when input is [58, 46, 43, 1, 43, 39] the target: 56
when input is [58, 46, 43, 1, 43, 39, 56] the target: 57
when input is [58, 46, 43, 1, 43, 39, 56, 57] the target: 10
when input is [39] the target: 58
when input is [39, 58] the target: 47
when input is [39, 58, 47] the target: 53
when input is [39, 58, 47, 53] the target: 52
when input is [39, 58, 47, 53, 52] the target: 12
when input is [39, 58, 47, 53, 52, 12] the target: 1
when input is [39, 58, 47, 53, 52, 12, 1] the target: 37
when input is [39, 58, 47, 53, 52, 12, 1, 37] the target: 53
when input is [53] the target: 56
when input is [53, 56] the target: 43
when input is [53, 56, 43] the target: 1
when input is [53, 56, 43, 1] the target: 21
when input is [53, 56, 43, 1, 21] the target: 1
when input is [53, 56, 43, 1, 21, 1] the target: 41
when input is [53, 56, 43, 1, 21, 1, 41] the target: 39
when input is [53, 56, 43, 1, 21, 1, 41, 39] the target: 51
when input is [50] the target: 39
when input is [50, 39] the target: 52
when input is [50, 39, 52] the target: 63
when input is [50, 39, 52, 63] the target: 1
when input is [50, 39, 52, 63, 1] the target: 47
when input is [50, 39, 52, 63, 1, 47] the target: 58
when input is [50, 39, 52, 63, 1, 47, 58] the target: 57
when input is [50, 39, 52, 63, 1, 47, 58, 57] the target: 43
when input is [56] the target: 53
when input is [56, 53] the target: 63
when input is [56, 53, 63] the target: 1
when input is [56, 53, 63, 1] the target: 42
when input is [56, 53, 63, 1, 42] the target: 47
when input is [56, 53, 63, 1, 42, 47] the target: 42
when input is [56, 53, 63, 1, 42, 47, 42] the target: 1
when input is [56, 53, 63, 1, 42, 47, 42, 1] the target: 57
when input is [39] the target: 51
when input is [39, 51] the target: 1
when input is [39, 51, 1] the target: 39
when input is [39, 51, 1, 39] the target: 44
when input is [39, 51, 1, 39, 44] the target: 56
when input is [39, 51, 1, 39, 44, 56] the target: 39
when input is [39, 51, 1, 39, 44, 56, 39] the target: 47
when input is [39, 51, 1, 39, 44, 56, 39, 47] the target: 42
when input is [17] the target: 24
when input is [17, 24] the target: 21
when input is [17, 24, 21] the target: 38
when input is [17, 24, 21, 38] the target: 13
when input is [17, 24, 21, 38, 13] the target: 14
when input is [17, 24, 21, 38, 13, 14] the target: 17
when input is [17, 24, 21, 38, 13, 14, 17] the target: 32
when input is [17, 24, 21, 38, 13, 14, 17, 32] the target: 20
tensor dtype=int64, shape=[16, 8], device=CPU 
[[24, 43, 58, ..., 1, 46, 43],
 [44, 53, 56, ..., 46, 39, 58],
 [52, 58, 1, ..., 39, 58, 1],
 ...,
 [56, 53, 63, ..., 47, 42, 1],
 [39, 51, 1, ..., 56, 39, 47],
 [17, 24, 21, ..., 14, 17, 32]]
tensor dtype=float32, shape=[], device=CPU 
2.1746
tensor dtype=float32, shape=[], device=CPU 
1.9668
batch_size * block_size = 128
logits.shape = ArraySeq(128, 65)
loss=4.639151
decode:'
,:pRP-ZOD!.wnvWOXwQhP:I'UiQjvwq$r,aV!FSdYcmCHWN:BkOUqv-N-Z
.vt.pdgZeBNtOXQtxMQG?nb&ldAgrzBtKHrTDj.JN'
4.515782
decode 2:'
m
?qkRE;tCdT!KW.NE;H
.vsX.U,VnQmjMV-PPr,,,n&zLJ'ZHwieKrD.!a'bzVamvRugg&V,,fgTv'eVab$
,Nzk&Ja:hubWrLLz3NsX'tRL
.P
yFlfMD!BcbFZemeKjME-YuimkKRc$IffPyZ;Y3n&h$.e hP?AI,IzJl.!lH,uGUAn:USV n&aUy&hal
GSogDiX3YNRhPT,wwKJoNMETqk'YBmhOULkEx dhlqyu!WxkkTlwztxFdSkgUuhyM;.
WIxN'3hJAIejmLkKKcoo,:Kr
m3Npsnv3hAVjpV-A ,dplvs-oW!MlgURiuwxvG;qkPgDqrYhughoTKgV$d?Hrk':imFxJpMEtB?UmLffc$Kr?XNRAgWPsBRLDI,BYBT,dHa?VaV-coPgHw?bCd3lDxSW eHwFKrVNet&srY3lBFvtCDEa,Y3wrrY3PPXWp,dqLM?Xrf:pOeuY!BCo!aSz?niR!GvwhDiijhWdGshkAgp3G'
step 0: train loss 4.6140065, val loss 4.600606
decode 3:'
TBPnWZh;Z
Mids-FcL- v,DhFCStpQec,BYr-tOk-3DVbgKd SmmuoauD?JvZkw'biHjUwVeaf
bYgfKG?PnfKJJjhX;elx'kasenwA3'c'Zm fOYAjhgY;
w;GiI&ucYSp3u&LoUDot$$Zvo.-YJgKOmw':lXRkoPxwOAfECi$idgzccA&Xaov3tn$g-JhlEZw,.Z
Ms:zicpo.g-FW .I.Pri-F3.Gniy.idWQ
r
MEoJFMG
'wGj?Rm
dg&eLtHR!kDVSrj oQ
McmgGEo
I
rKloPvPLD;JBe;..KbXOP'pVa,LDWhI;qmctVgcc:-uqY'Ikj?eoJhIyvWHa3u,;zH 3XxVD.sT&LW!ANcHkdjrvLYBTiXO?!O?ffaauovFQXqAsfIQ

DdU
$t:oUC&vf rv,G,kfv-FQ dpz3cJb-SEQtVb:kah?GEu,;HSuBDauK
IO?GEZa$qCro.?fEMaNPVidaxOGCPoLaWq,N.EMF.afE'
a=tensor dtype=float32, shape=[3, 3], device=CPU 
[[1.0000, 0.0000, 0.0000],
 [0.5000, 0.5000, 0.0000],
 [0.3333, 0.3333, 0.3333]]
--
b=tensor dtype=float32, shape=[3, 2], device=CPU 
[[2.0000, 7.0000],
 [6.0000, 4.0000],
 [6.0000, 5.0000]]
--
c=tensor dtype=float32, shape=[3, 2], device=CPU 
[[2.0000, 7.0000],
 [4.0000, 5.5000],
 [4.6667, 5.3333]]
ArraySeq(4, 8, 2)
wei0.shape = ArraySeq(8, 8)
true
true
Token embedding: BigramLanguageModel1
4225 parameters
BigramLanguageModel1: #3 4225 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
step 0: train loss 4.3465767, val loss 4.344506
decode 4:'
XeVmPSu'.mW'rCpiKO3g?ORq;nyjyxZhghjpYFQO:iPZg$urU
FEMP
CYjwzYEwaZH
mjC'z-jhFE&.yLo?uc mek
B;ckpw'rz&OAYd:ivmtbJjIEQtl?.Mk
veCzLOrA'eGnIaI?vOiWpwyHigsiMjMlSvj&vCaboeTdH;yscEQUfK;ctdHbpfarMl.$Kt  RxSfgDrvyUlhx?'!lTJy WcaaKgrm;ckXAHnsO,moyFsWP?Br;LkARXor?B;&meKmeVhGiRcjtaLltHT,$DQVjEv.yBN?OHZYsxcU3 ! n&R$
ACm,dHz.Iz'E iLyG!ru?BIub!N3zfNl DkpTDXc-H-a?CZns
QfTwNeq 'a$
fosXNVHPii.AivNXcGllB'LXuhT. PiccPUNEBK?sHWcUz&fNHWCJShQucjE:BolxJUEx
O3
;kMUfVpw.Re;vM:v'.:C:;tb:;uvd!R3BN,J3g,;-LVj'UVcUvLyl twn.Ml!'
Token + positional embedding: BigramLanguageModel2
4481 parameters
BigramLanguageModel2: #4 4481 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
decode 5:'
Z.EBDJOcJGZc' A TvJ&GryNn;k,AQfghU&Pwg3kjHY
io:XGm!bspOQACf&BBl
JmNjqfU?fMqTWSuBLV&FEisQuIB?$aSwQyAL?$-lt !M, u-pX U b:yOrzutKOiawQdRagybJxtaFFqJS-arTGUXh?puZNyic, ifuES$X3BvSAikYKS$HlT Ts:nyhxcR?'BR?vSpF oscBVY $Pgq!NrUeU?frJsQ;j 
Q!, ,Vz:jES!oqyzGK?QwB-B &3PFcf ,UZf;YKKTos:!D:CyZLtODORPcpzWeTXUdBzscf3uzmmsz.GROB uISrUzrY?KYenNIo$;kzWWRybazL!XTrSu-W!wQREz
$DbM.-szq!Ws$m!-?h$PrFGEtWW?;MrRpUOH
QpuFrz;GEF&K??$.:Hz,umx
xp!cjJiMGlwQyZU3:&PDwttHCOvQeUp,WxndUUFS!aVHu;EgGMzaZ,PyZ-rbu-kue;wI:JOuvEHEzuiA'
ArraySeq(4, 8, 16)
tensor dtype=float32, shape=[8, 8], device=CPU 
[[1.0000, 0.0000, 0.0000, ..., 0.0000, 0.0000, 0.0000],
 [0.1574, 0.8426, 0.0000, ..., 0.0000, 0.0000, 0.0000],
 [0.2088, 0.1646, 0.6266, ..., 0.0000, 0.0000, 0.0000],
 ...,
 [0.0176, 0.2689, 0.0215, ..., 0.0019, 0.0000, 0.0000],
 [0.1691, 0.4066, 0.0438, ..., 0.2012, 0.0329, 0.0000],
 [0.0210, 0.0843, 0.0555, ..., 0.0709, 0.2423, 0.2391]]
tensor dtype=float32, shape=[], device=CPU 
1.0449
tensor dtype=float32, shape=[], device=CPU 
1.0700
tensor dtype=float32, shape=[], device=CPU 
17.4690
tensor dtype=float32, shape=[], device=CPU 
1.0918
tensor dtype=float64, shape=[5], device=CPU 
[0.1925, 0.1426, 0.2351, 0.1426, 0.2872]
tensor dtype=float64, shape=[5], device=CPU 
[0.0326, 0.0030, 0.1615, 0.0030, 0.8000]
Single head attention: BigramLanguageModel3
4977 parameters
BigramLanguageModel3: #7 4977 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  sa_head: Head1(n_embed=32, head_size=16, block_size=8): #3 1536 (
    key: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
    query: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
    value: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
  )
  lm_head: Linear(inFeatures=16, outFeatures=65, bias=true): #2 <1040,65> 
)
step 0: train loss 4.174592, val loss 4.1752186
step 0: train loss 4.166315, val loss 4.169002
Multi-head attention BigramLanguageModel4
MultiHeadAttention_1 registering hs_0:Head1
MultiHeadAttention_1 registering hs_1:Head1
MultiHeadAttention_1 registering hs_2:Head1
MultiHeadAttention_1 registering hs_3:Head1
7553 parameters
BigramLanguageModel4: #16 7553 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  sa_heads: MultiHeadAttention_1(numHeads=4, nEmbed=32, headSize=8, blockSize=8): #12 3072 (
    hs_0: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_1: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_2: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_3: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
  )
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
7553 parameters
learningRate = 1.1E-5
maxIterations = 75000
step 0: train loss 4.3133245, val loss 4.3054852
step 500: train loss 4.1939335, val loss 4.190179
step 1000: train loss 4.0907383, val loss 4.090936
step 1500: train loss 3.997032, val loss 3.9942756
step 2000: train loss 3.9094172, val loss 3.9084198
step 2500: train loss 3.8176517, val loss 3.820111
step 3000: train loss 3.7226224, val loss 3.7409875
step 3500: train loss 3.6290882, val loss 3.647388
step 4000: train loss 3.5438983, val loss 3.5538654
step 4500: train loss 3.463711, val loss 3.475846
step 5000: train loss 3.3792386, val loss 3.4253995
step 5500: train loss 3.3530133, val loss 3.3954504
step 6000: train loss 3.3139706, val loss 3.3583126
step 6500: train loss 3.3096228, val loss 3.3339188
step 7000: train loss 3.2881775, val loss 3.3006709
step 7500: train loss 3.2747333, val loss 3.291416
step 8000: train loss 3.2486255, val loss 3.2988892
step 8500: train loss 3.25455, val loss 3.2570655
step 9000: train loss 3.241603, val loss 3.28991
step 9500: train loss 3.210447, val loss 3.2592425
step 10000: train loss 3.2262554, val loss 3.234111
step 10500: train loss 3.2105372, val loss 3.2347736
step 11000: train loss 3.1915243, val loss 3.2155719
step 11500: train loss 3.1766207, val loss 3.218236
step 12000: train loss 3.1849127, val loss 3.199224
step 12500: train loss 3.1723251, val loss 3.181837
step 13000: train loss 3.1478224, val loss 3.1798525
step 13500: train loss 3.1502645, val loss 3.170112
step 14000: train loss 3.1423156, val loss 3.164205
step 14500: train loss 3.1285453, val loss 3.1670825
step 15000: train loss 3.121828, val loss 3.1419404
step 15500: train loss 3.111131, val loss 3.1452165
step 16000: train loss 3.1111937, val loss 3.123063
step 16500: train loss 3.0804517, val loss 3.1025302
step 17000: train loss 3.073243, val loss 3.1078372
step 17500: train loss 3.05838, val loss 3.0979815
step 18000: train loss 3.0706275, val loss 3.0834668
step 18500: train loss 3.0476499, val loss 3.0673044
step 19000: train loss 3.0519712, val loss 3.06867
step 19500: train loss 3.0179355, val loss 3.077825
step 20000: train loss 3.0191762, val loss 3.0286486
step 20500: train loss 3.0292826, val loss 3.0280871
step 21000: train loss 3.014631, val loss 3.0199625
step 21500: train loss 3.0205371, val loss 3.0436969
step 22000: train loss 2.9806378, val loss 3.0117502
step 22500: train loss 2.9829447, val loss 3.0020156
step 23000: train loss 2.9863672, val loss 3.0071642
step 23500: train loss 2.9672348, val loss 2.972497
step 24000: train loss 2.9619036, val loss 2.980266
step 24500: train loss 2.9512537, val loss 2.9686108
step 25000: train loss 2.950572, val loss 2.9682934
step 25500: train loss 2.9522026, val loss 2.9534063
step 26000: train loss 2.9396403, val loss 2.93672
step 26500: train loss 2.9299927, val loss 2.9508386
step 27000: train loss 2.926332, val loss 2.9362824
step 27500: train loss 2.9109728, val loss 2.9241135
step 28000: train loss 2.9056222, val loss 2.9376996
step 28500: train loss 2.8878522, val loss 2.9145167
step 29000: train loss 2.8971224, val loss 2.9267414
step 29500: train loss 2.895727, val loss 2.8991785
step 30000: train loss 2.8837018, val loss 2.9082842
step 30500: train loss 2.8744955, val loss 2.8852568
step 31000: train loss 2.8712013, val loss 2.8766472
step 31500: train loss 2.8427112, val loss 2.9093552
step 32000: train loss 2.8841162, val loss 2.8822522
step 32500: train loss 2.8624668, val loss 2.857178
step 33000: train loss 2.8618433, val loss 2.8902824
step 33500: train loss 2.8465967, val loss 2.860329
step 34000: train loss 2.8546185, val loss 2.8745878
step 34500: train loss 2.846715, val loss 2.8642492
step 35000: train loss 2.8570232, val loss 2.8586733
step 35500: train loss 2.8240638, val loss 2.859291
step 36000: train loss 2.8333251, val loss 2.8455803
step 36500: train loss 2.8117476, val loss 2.8536706
step 37000: train loss 2.834212, val loss 2.8169756
step 37500: train loss 2.8281965, val loss 2.82694
step 38000: train loss 2.795346, val loss 2.8304915
step 38500: train loss 2.7995582, val loss 2.8326948
step 39000: train loss 2.8094988, val loss 2.811408
step 39500: train loss 2.81072, val loss 2.8024569
step 40000: train loss 2.8042352, val loss 2.822788
step 40500: train loss 2.7881746, val loss 2.8060496
step 41000: train loss 2.7838516, val loss 2.795701
step 41500: train loss 2.791561, val loss 2.7946475
step 42000: train loss 2.7917821, val loss 2.7914405
step 42500: train loss 2.7787714, val loss 2.7975223
step 43000: train loss 2.792014, val loss 2.7997782
step 43500: train loss 2.7633832, val loss 2.7830262
step 44000: train loss 2.762034, val loss 2.7746105
step 44500: train loss 2.7711723, val loss 2.773117
step 45000: train loss 2.7691534, val loss 2.7877924
step 45500: train loss 2.7599738, val loss 2.7896605
step 46000: train loss 2.752057, val loss 2.7865722
step 46500: train loss 2.7453718, val loss 2.7683594
step 47000: train loss 2.7525578, val loss 2.7739923
step 47500: train loss 2.7484171, val loss 2.7624955
step 48000: train loss 2.754197, val loss 2.7575958
step 48500: train loss 2.7395325, val loss 2.7527757
step 49000: train loss 2.7442508, val loss 2.7424338
step 49500: train loss 2.7316723, val loss 2.7484293
step 50000: train loss 2.7249527, val loss 2.7490156
step 50500: train loss 2.737166, val loss 2.7455213
step 51000: train loss 2.7369573, val loss 2.7385678
step 51500: train loss 2.7379618, val loss 2.739238
step 52000: train loss 2.7246258, val loss 2.7284582
step 52500: train loss 2.721887, val loss 2.7345886
step 53000: train loss 2.7070172, val loss 2.7319782
step 53500: train loss 2.721511, val loss 2.7202806
step 54000: train loss 2.7257044, val loss 2.7167292
step 54500: train loss 2.7093232, val loss 2.7079685
step 55000: train loss 2.700936, val loss 2.7226694
step 55500: train loss 2.7052603, val loss 2.7222016
step 56000: train loss 2.7137177, val loss 2.711395
step 56500: train loss 2.7024224, val loss 2.7090752
step 57000: train loss 2.6816747, val loss 2.7177165
step 57500: train loss 2.6893246, val loss 2.7204916
step 58000: train loss 2.6994998, val loss 2.6981504
step 58500: train loss 2.7014081, val loss 2.6887345
step 59000: train loss 2.6871643, val loss 2.713176
step 59500: train loss 2.6984363, val loss 2.697606
step 60000: train loss 2.6754975, val loss 2.686687
step 60500: train loss 2.6850717, val loss 2.695972
step 61000: train loss 2.6864908, val loss 2.6646585
step 61500: train loss 2.6635287, val loss 2.6948154
step 62000: train loss 2.6754193, val loss 2.6807175
step 62500: train loss 2.6705418, val loss 2.6913345
step 63000: train loss 2.6844606, val loss 2.6831045
step 63500: train loss 2.671497, val loss 2.6790469
step 64000: train loss 2.6798294, val loss 2.6674273
step 64500: train loss 2.6732178, val loss 2.6804113
step 65000: train loss 2.6599884, val loss 2.6616704
step 65500: train loss 2.6688738, val loss 2.6815119
step 66000: train loss 2.6561682, val loss 2.660819
step 66500: train loss 2.6551409, val loss 2.6900735
step 67000: train loss 2.6593506, val loss 2.6655645
step 67500: train loss 2.6576855, val loss 2.6622765
step 68000: train loss 2.646755, val loss 2.645544
step 68500: train loss 2.664433, val loss 2.6527886
step 69000: train loss 2.6556842, val loss 2.6588967
step 69500: train loss 2.6503828, val loss 2.6482623
step 70000: train loss 2.6725504, val loss 2.6499927
step 70500: train loss 2.6476095, val loss 2.642872
step 71000: train loss 2.6348913, val loss 2.668836
step 71500: train loss 2.6386476, val loss 2.6356683
step 72000: train loss 2.6351874, val loss 2.6506643
step 72500: train loss 2.641074, val loss 2.6489341
step 73000: train loss 2.6298342, val loss 2.6194658
step 73500: train loss 2.6382575, val loss 2.638975
step 74000: train loss 2.6405017, val loss 2.6389446
step 74500: train loss 2.625792, val loss 2.649491
step 74999: train loss 2.632658, val loss 2.6341066
step 75000: train loss 2.6288233, val loss 2.626626
decode 8:'







OSlTHH

YTnd le hacisin.

Hcueve cotec  nrongend' nothire s.
I wo
:hele!kr:o, pr don, oruuth he,
Anle penheuliand mid nde migo or? nvee orind e k, he ome'es khillerg mers tjand ixn
E
U:C CUild bcas dP o.
BK,
FaAR, liUch se patouaw bisthil wendd iadgI:or, ho  hando!re houla Ckw;
Thicow of ortheelie, V:
CNherdod or, ttord, road
Thast t s; og wer
Iy thac a, Bacto

H, re thegant a thengd fn, b, anS,geth n INu ibn, peders haus: lgeroreided pm haewy st m, fatthethe, ere prout

SZAWtTEhe:
C
Wn har,
Ore'
Exception in thread "main" java.lang.ExceptionInInitializerError
	at gpt.BiGram.main(BiGram.scala)
Caused by: java.lang.ArithmeticException: / by zero
	at gpt.BiGram$.<clinit>(BiGram.scala:1490)
	... 1 more
1 targets failed
examples.runMain subprocess failed
