nohup: ignoring input
[info] compiling 1 Scala source to /workspaces/storch/out/examples/compile.dest/classes ...
[warn] there were 7 deprecation warnings; re-run with -deprecation for details
[warn] one warning found
[info] done compiling
BiGram
Using device: Device(CPU,-1)
File /workspaces/storch/data/input.txt already exists.
chars = 
,  , !, $, &, ', ,, -, ., 3, :, ;, ?, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
vocab_size = 65
"BiGram!" = "BiGram!"
inputs:
ArraySeq(16, 8)
tensor dtype=int64, shape=[16, 8], device=CPU 
[[24, 43, 58, ..., 1, 46, 43],
 [44, 53, 56, ..., 46, 39, 58],
 [52, 58, 1, ..., 39, 58, 1],
 ...,
 [56, 53, 63, ..., 47, 42, 1],
 [39, 51, 1, ..., 56, 39, 47],
 [17, 24, 21, ..., 14, 17, 32]]
targets:
ArraySeq(16, 8)
tensor dtype=int64, shape=[16, 8], device=CPU 
[[43, 58, 5, ..., 46, 43, 39],
 [53, 56, 1, ..., 39, 58, 1],
 [58, 1, 58, ..., 58, 1, 46],
 ...,
 [53, 63, 1, ..., 42, 1, 57],
 [51, 1, 39, ..., 39, 47, 42],
 [24, 21, 38, ..., 17, 32, 20]]
----
xb:
Let's he
.
for that
yb:
et's hea
.
or that 
when input is [24] the target: 43
when input is [24, 43] the target: 58
when input is [24, 43, 58] the target: 5
when input is [24, 43, 58, 5] the target: 57
when input is [24, 43, 58, 5, 57] the target: 1
when input is [24, 43, 58, 5, 57, 1] the target: 46
when input is [24, 43, 58, 5, 57, 1, 46] the target: 43
when input is [24, 43, 58, 5, 57, 1, 46, 43] the target: 39
when input is [44] the target: 53
when input is [44, 53] the target: 56
when input is [44, 53, 56] the target: 1
when input is [44, 53, 56, 1] the target: 58
when input is [44, 53, 56, 1, 58] the target: 46
when input is [44, 53, 56, 1, 58, 46] the target: 39
when input is [44, 53, 56, 1, 58, 46, 39] the target: 58
when input is [44, 53, 56, 1, 58, 46, 39, 58] the target: 1
when input is [52] the target: 58
when input is [52, 58] the target: 1
when input is [52, 58, 1] the target: 58
when input is [52, 58, 1, 58] the target: 46
when input is [52, 58, 1, 58, 46] the target: 39
when input is [52, 58, 1, 58, 46, 39] the target: 58
when input is [52, 58, 1, 58, 46, 39, 58] the target: 1
when input is [52, 58, 1, 58, 46, 39, 58, 1] the target: 46
when input is [25] the target: 17
when input is [25, 17] the target: 27
when input is [25, 17, 27] the target: 10
when input is [25, 17, 27, 10] the target: 0
when input is [25, 17, 27, 10, 0] the target: 21
when input is [25, 17, 27, 10, 0, 21] the target: 1
when input is [25, 17, 27, 10, 0, 21, 1] the target: 54
when input is [25, 17, 27, 10, 0, 21, 1, 54] the target: 39
when input is [57] the target: 43
when input is [57, 43] the target: 60
when input is [57, 43, 60] the target: 43
when input is [57, 43, 60, 43] the target: 52
when input is [57, 43, 60, 43, 52] the target: 1
when input is [57, 43, 60, 43, 52, 1] the target: 63
when input is [57, 43, 60, 43, 52, 1, 63] the target: 43
when input is [57, 43, 60, 43, 52, 1, 63, 43] the target: 39
when input is [60] the target: 43
when input is [60, 43] the target: 42
when input is [60, 43, 42] the target: 8
when input is [60, 43, 42, 8] the target: 0
when input is [60, 43, 42, 8, 0] the target: 25
when input is [60, 43, 42, 8, 0, 25] the target: 63
when input is [60, 43, 42, 8, 0, 25, 63] the target: 1
when input is [60, 43, 42, 8, 0, 25, 63, 1] the target: 45
when input is [56] the target: 42
when input is [56, 42] the target: 5
when input is [56, 42, 5] the target: 57
when input is [56, 42, 5, 57] the target: 1
when input is [56, 42, 5, 57, 1] the target: 57
when input is [56, 42, 5, 57, 1, 57] the target: 39
when input is [56, 42, 5, 57, 1, 57, 39] the target: 49
when input is [56, 42, 5, 57, 1, 57, 39, 49] the target: 43
when input is [43] the target: 57
when input is [43, 57] the target: 58
when input is [43, 57, 58] the target: 63
when input is [43, 57, 58, 63] the target: 6
when input is [43, 57, 58, 63, 6] the target: 1
when input is [43, 57, 58, 63, 6, 1] the target: 58
when input is [43, 57, 58, 63, 6, 1, 58] the target: 46
when input is [43, 57, 58, 63, 6, 1, 58, 46] the target: 47
when input is [43] the target: 1
when input is [43, 1] the target: 51
when input is [43, 1, 51] the target: 39
when input is [43, 1, 51, 39] the target: 63
when input is [43, 1, 51, 39, 63] the target: 1
when input is [43, 1, 51, 39, 63, 1] the target: 40
when input is [43, 1, 51, 39, 63, 1, 40] the target: 43
when input is [43, 1, 51, 39, 63, 1, 40, 43] the target: 1
when input is [58] the target: 46
when input is [58, 46] the target: 43
when input is [58, 46, 43] the target: 1
when input is [58, 46, 43, 1] the target: 43
when input is [58, 46, 43, 1, 43] the target: 39
when input is [58, 46, 43, 1, 43, 39] the target: 56
when input is [58, 46, 43, 1, 43, 39, 56] the target: 57
when input is [58, 46, 43, 1, 43, 39, 56, 57] the target: 10
when input is [39] the target: 58
when input is [39, 58] the target: 47
when input is [39, 58, 47] the target: 53
when input is [39, 58, 47, 53] the target: 52
when input is [39, 58, 47, 53, 52] the target: 12
when input is [39, 58, 47, 53, 52, 12] the target: 1
when input is [39, 58, 47, 53, 52, 12, 1] the target: 37
when input is [39, 58, 47, 53, 52, 12, 1, 37] the target: 53
when input is [53] the target: 56
when input is [53, 56] the target: 43
when input is [53, 56, 43] the target: 1
when input is [53, 56, 43, 1] the target: 21
when input is [53, 56, 43, 1, 21] the target: 1
when input is [53, 56, 43, 1, 21, 1] the target: 41
when input is [53, 56, 43, 1, 21, 1, 41] the target: 39
when input is [53, 56, 43, 1, 21, 1, 41, 39] the target: 51
when input is [50] the target: 39
when input is [50, 39] the target: 52
when input is [50, 39, 52] the target: 63
when input is [50, 39, 52, 63] the target: 1
when input is [50, 39, 52, 63, 1] the target: 47
when input is [50, 39, 52, 63, 1, 47] the target: 58
when input is [50, 39, 52, 63, 1, 47, 58] the target: 57
when input is [50, 39, 52, 63, 1, 47, 58, 57] the target: 43
when input is [56] the target: 53
when input is [56, 53] the target: 63
when input is [56, 53, 63] the target: 1
when input is [56, 53, 63, 1] the target: 42
when input is [56, 53, 63, 1, 42] the target: 47
when input is [56, 53, 63, 1, 42, 47] the target: 42
when input is [56, 53, 63, 1, 42, 47, 42] the target: 1
when input is [56, 53, 63, 1, 42, 47, 42, 1] the target: 57
when input is [39] the target: 51
when input is [39, 51] the target: 1
when input is [39, 51, 1] the target: 39
when input is [39, 51, 1, 39] the target: 44
when input is [39, 51, 1, 39, 44] the target: 56
when input is [39, 51, 1, 39, 44, 56] the target: 39
when input is [39, 51, 1, 39, 44, 56, 39] the target: 47
when input is [39, 51, 1, 39, 44, 56, 39, 47] the target: 42
when input is [17] the target: 24
when input is [17, 24] the target: 21
when input is [17, 24, 21] the target: 38
when input is [17, 24, 21, 38] the target: 13
when input is [17, 24, 21, 38, 13] the target: 14
when input is [17, 24, 21, 38, 13, 14] the target: 17
when input is [17, 24, 21, 38, 13, 14, 17] the target: 32
when input is [17, 24, 21, 38, 13, 14, 17, 32] the target: 20
tensor dtype=int64, shape=[16, 8], device=CPU 
[[24, 43, 58, ..., 1, 46, 43],
 [44, 53, 56, ..., 46, 39, 58],
 [52, 58, 1, ..., 39, 58, 1],
 ...,
 [56, 53, 63, ..., 47, 42, 1],
 [39, 51, 1, ..., 56, 39, 47],
 [17, 24, 21, ..., 14, 17, 32]]
tensor dtype=float32, shape=[], device=CPU 
2.1746
tensor dtype=float32, shape=[], device=CPU 
1.9668
batch_size * block_size = 128
logits.shape = ArraySeq(128, 65)
loss=4.639151
decode:'
,:pRP-ZOD!.wnvWOXwQhP:I'UiQjvwq$r,aV!FSdYcmCHWN:BkOUqv-N-Z
.vt.pdgZeBNtOXQtxMQG?nb&ldAgrzBtKHrTDj.JN'
4.515782
decode 2:'
m
?qkRE;tCdT!KW.NE;H
.vsX.U,VnQmjMV-PPr,,,n&zLJ'ZHwieKrD.!a'bzVamvRugg&V,,fgTv'eVab$
,Nzk&Ja:hubWrLLz3NsX'tRL
.P
yFlfMD!BcbFZemeKjME-YuimkKRc$IffPyZ;Y3n&h$.e hP?AI,IzJl.!lH,uGUAn:USV n&aUy&hal
GSogDiX3YNRhPT,wwKJoNMETqk'YBmhOULkEx dhlqyu!WxkkTlwztxFdSkgUuhyM;.
WIxN'3hJAIejmLkKKcoo,:Kr
m3Npsnv3hAVjpV-A ,dplvs-oW!MlgURiuwxvG;qkPgDqrYhughoTKgV$d?Hrk':imFxJpMEtB?UmLffc$Kr?XNRAgWPsBRLDI,BYBT,dHa?VaV-coPgHw?bCd3lDxSW eHwFKrVNet&srY3lBFvtCDEa,Y3wrrY3PPXWp,dqLM?Xrf:pOeuY!BCo!aSz?niR!GvwhDiijhWdGshkAgp3G'
step 0: train loss 4.6140065, val loss 4.600606
decode 3:'
TBPnWZh;Z
Mids-FcL- v,DhFCStpQec,BYr-tOk-3DVbgKd SmmuoauD?JvZkw'biHjUwVeaf
bYgfKG?PnfKJJjhX;elx'kasenwA3'c'Zm fOYAjhgY;
w;GiI&ucYSp3u&LoUDot$$Zvo.-YJgKOmw':lXRkoPxwOAfECi$idgzccA&Xaov3tn$g-JhlEZw,.Z
Ms:zicpo.g-FW .I.Pri-F3.Gniy.idWQ
r
MEoJFMG
'wGj?Rm
dg&eLtHR!kDVSrj oQ
McmgGEo
I
rKloPvPLD;JBe;..KbXOP'pVa,LDWhI;qmctVgcc:-uqY'Ikj?eoJhIyvWHa3u,;zH 3XxVD.sT&LW!ANcHkdjrvLYBTiXO?!O?ffaauovFQXqAsfIQ

DdU
$t:oUC&vf rv,G,kfv-FQ dpz3cJb-SEQtVb:kah?GEu,;HSuBDauK
IO?GEZa$qCro.?fEMaNPVidaxOGCPoLaWq,N.EMF.afE'
a=tensor dtype=float32, shape=[3, 3], device=CPU 
[[1.0000, 0.0000, 0.0000],
 [0.5000, 0.5000, 0.0000],
 [0.3333, 0.3333, 0.3333]]
--
b=tensor dtype=float32, shape=[3, 2], device=CPU 
[[2.0000, 7.0000],
 [6.0000, 4.0000],
 [6.0000, 5.0000]]
--
c=tensor dtype=float32, shape=[3, 2], device=CPU 
[[2.0000, 7.0000],
 [4.0000, 5.5000],
 [4.6667, 5.3333]]
ArraySeq(4, 8, 2)
wei0.shape = ArraySeq(8, 8)
true
true
Token embedding: BigramLanguageModel1
4225 parameters
BigramLanguageModel1: #3 4225 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
step 0: train loss 4.3465767, val loss 4.344506
decode 4:'
XeVmPSu'.mW'rCpiKO3g?ORq;nyjyxZhghjpYFQO:iPZg$urU
FEMP
CYjwzYEwaZH
mjC'z-jhFE&.yLo?uc mek
B;ckpw'rz&OAYd:ivmtbJjIEQtl?.Mk
veCzLOrA'eGnIaI?vOiWpwyHigsiMjMlSvj&vCaboeTdH;yscEQUfK;ctdHbpfarMl.$Kt  RxSfgDrvyUlhx?'!lTJy WcaaKgrm;ckXAHnsO,moyFsWP?Br;LkARXor?B;&meKmeVhGiRcjtaLltHT,$DQVjEv.yBN?OHZYsxcU3 ! n&R$
ACm,dHz.Iz'E iLyG!ru?BIub!N3zfNl DkpTDXc-H-a?CZns
QfTwNeq 'a$
fosXNVHPii.AivNXcGllB'LXuhT. PiccPUNEBK?sHWcUz&fNHWCJShQucjE:BolxJUEx
O3
;kMUfVpw.Re;vM:v'.:C:;tb:;uvd!R3BN,J3g,;-LVj'UVcUvLyl twn.Ml!'
Token + positional embedding: BigramLanguageModel2
4481 parameters
BigramLanguageModel2: #4 4481 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
decode 5:'
Z.EBDJOcJGZc' A TvJ&GryNn;k,AQfghU&Pwg3kjHY
io:XGm!bspOQACf&BBl
JmNjqfU?fMqTWSuBLV&FEisQuIB?$aSwQyAL?$-lt !M, u-pX U b:yOrzutKOiawQdRagybJxtaFFqJS-arTGUXh?puZNyic, ifuES$X3BvSAikYKS$HlT Ts:nyhxcR?'BR?vSpF oscBVY $Pgq!NrUeU?frJsQ;j 
Q!, ,Vz:jES!oqyzGK?QwB-B &3PFcf ,UZf;YKKTos:!D:CyZLtODORPcpzWeTXUdBzscf3uzmmsz.GROB uISrUzrY?KYenNIo$;kzWWRybazL!XTrSu-W!wQREz
$DbM.-szq!Ws$m!-?h$PrFGEtWW?;MrRpUOH
QpuFrz;GEF&K??$.:Hz,umx
xp!cjJiMGlwQyZU3:&PDwttHCOvQeUp,WxndUUFS!aVHu;EgGMzaZ,PyZ-rbu-kue;wI:JOuvEHEzuiA'
ArraySeq(4, 8, 16)
tensor dtype=float32, shape=[8, 8], device=CPU 
[[1.0000, 0.0000, 0.0000, ..., 0.0000, 0.0000, 0.0000],
 [0.1574, 0.8426, 0.0000, ..., 0.0000, 0.0000, 0.0000],
 [0.2088, 0.1646, 0.6266, ..., 0.0000, 0.0000, 0.0000],
 ...,
 [0.0176, 0.2689, 0.0215, ..., 0.0019, 0.0000, 0.0000],
 [0.1691, 0.4066, 0.0438, ..., 0.2012, 0.0329, 0.0000],
 [0.0210, 0.0843, 0.0555, ..., 0.0709, 0.2423, 0.2391]]
tensor dtype=float32, shape=[], device=CPU 
1.0449
tensor dtype=float32, shape=[], device=CPU 
1.0700
tensor dtype=float32, shape=[], device=CPU 
17.4690
tensor dtype=float32, shape=[], device=CPU 
1.0918
tensor dtype=float64, shape=[5], device=CPU 
[0.1925, 0.1426, 0.2351, 0.1426, 0.2872]
tensor dtype=float64, shape=[5], device=CPU 
[0.0326, 0.0030, 0.1615, 0.0030, 0.8000]
Single head attention: BigramLanguageModel3
4977 parameters
BigramLanguageModel3: #7 4977 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  sa_head: Head1(n_embed=32, head_size=16, block_size=8): #3 1536 (
    key: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
    query: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
    value: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
  )
  lm_head: Linear(inFeatures=16, outFeatures=65, bias=true): #2 <1040,65> 
)
step 0: train loss 4.174592, val loss 4.1752186
step 0: train loss 4.166315, val loss 4.169002
Multi-head attention BigramLanguageModel4
MultiHeadAttention_1 registering hs_0:Head1
MultiHeadAttention_1 registering hs_1:Head1
MultiHeadAttention_1 registering hs_2:Head1
MultiHeadAttention_1 registering hs_3:Head1
7553 parameters
BigramLanguageModel4: #16 7553 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  sa_heads: MultiHeadAttention_1(numHeads=4, nEmbed=32, headSize=8, blockSize=8): #12 3072 (
    hs_0: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_1: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_2: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_3: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
  )
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
7553 parameters
learningRate = 1.0E-5
maxIterations = 75000
step 0: train loss 4.3133245, val loss 4.3054852
step 500: train loss 4.204091, val loss 4.200032
step 1000: train loss 4.1089616, val loss 4.1083674
step 1500: train loss 4.0219374, val loss 4.018783
step 2000: train loss 3.940907, val loss 3.93928
step 2500: train loss 3.858163, val loss 3.8596926
step 3000: train loss 3.7726095, val loss 3.7886994
step 3500: train loss 3.6878948, val loss 3.703634
step 4000: train loss 3.6077507, val loss 3.616268
step 4500: train loss 3.5254614, val loss 3.53716
step 5000: train loss 3.4332294, val loss 3.4732678
step 5500: train loss 3.385781, val loss 3.4234138
step 6000: train loss 3.340705, val loss 3.381554
step 6500: train loss 3.3373346, val loss 3.3616095
step 7000: train loss 3.3129745, val loss 3.3261302
step 7500: train loss 3.2939837, val loss 3.310855
step 8000: train loss 3.2668777, val loss 3.3177075
step 8500: train loss 3.2725677, val loss 3.2754898
step 9000: train loss 3.2591367, val loss 3.3076105
step 9500: train loss 3.2266061, val loss 3.2761865
step 10000: train loss 3.2430847, val loss 3.2510462
step 10500: train loss 3.2279387, val loss 3.2533245
step 11000: train loss 3.2101188, val loss 3.2347858
step 11500: train loss 3.1961603, val loss 3.2384765
step 12000: train loss 3.2049987, val loss 3.2202587
step 12500: train loss 3.1928284, val loss 3.2040877
step 13000: train loss 3.1698372, val loss 3.2023447
step 13500: train loss 3.1731238, val loss 3.1935282
step 14000: train loss 3.1660058, val loss 3.1885881
step 14500: train loss 3.1528387, val loss 3.1932926
step 15000: train loss 3.1465588, val loss 3.1683118
step 15500: train loss 3.137481, val loss 3.1723871
step 16000: train loss 3.1381476, val loss 3.1508374
step 16500: train loss 3.1077812, val loss 3.1312385
step 17000: train loss 3.1016314, val loss 3.1374025
step 17500: train loss 3.0862277, val loss 3.1276658
step 18000: train loss 3.1001441, val loss 3.1138422
step 18500: train loss 3.0777972, val loss 3.0983036
step 19000: train loss 3.08259, val loss 3.099888
step 19500: train loss 3.0490048, val loss 3.109787
step 20000: train loss 3.0500877, val loss 3.0600317
step 20500: train loss 3.060922, val loss 3.0606909
step 21000: train loss 3.0460181, val loss 3.052785
step 21500: train loss 3.0528426, val loss 3.0769167
step 22000: train loss 3.0118976, val loss 3.045279
step 22500: train loss 3.0160546, val loss 3.03582
step 23000: train loss 3.019403, val loss 3.0407522
step 23500: train loss 2.9996498, val loss 3.0054972
step 24000: train loss 2.9949887, val loss 3.0132513
step 24500: train loss 2.9842925, val loss 3.0020814
step 25000: train loss 2.982036, val loss 3.0012312
step 25500: train loss 2.9841502, val loss 2.9875278
step 26000: train loss 2.9725049, val loss 2.9696455
step 26500: train loss 2.9624264, val loss 2.9837165
step 27000: train loss 2.958557, val loss 2.9687674
step 27500: train loss 2.9432135, val loss 2.9561129
step 28000: train loss 2.937705, val loss 2.9706483
step 28500: train loss 2.918455, val loss 2.9474044
step 29000: train loss 2.9279754, val loss 2.9595153
step 29500: train loss 2.9270816, val loss 2.9317138
step 30000: train loss 2.9139228, val loss 2.9397528
step 30500: train loss 2.904704, val loss 2.917201
step 31000: train loss 2.901393, val loss 2.9077902
step 31500: train loss 2.8727875, val loss 2.9415588
step 32000: train loss 2.9144418, val loss 2.9137647
step 32500: train loss 2.892349, val loss 2.8876107
step 33000: train loss 2.8913465, val loss 2.9213996
step 33500: train loss 2.8761258, val loss 2.89088
step 34000: train loss 2.8838618, val loss 2.9047213
step 34500: train loss 2.876572, val loss 2.8949323
step 35000: train loss 2.885134, val loss 2.8881705
step 35500: train loss 2.8527267, val loss 2.8883178
step 36000: train loss 2.8617103, val loss 2.8753252
step 36500: train loss 2.8392844, val loss 2.8832521
step 37000: train loss 2.8636184, val loss 2.8462272
step 37500: train loss 2.8572168, val loss 2.856014
step 38000: train loss 2.8234696, val loss 2.8589904
step 38500: train loss 2.8280509, val loss 2.8630683
step 39000: train loss 2.8382561, val loss 2.8407235
step 39500: train loss 2.8385541, val loss 2.8323143
step 40000: train loss 2.8316736, val loss 2.8509817
step 40500: train loss 2.8166757, val loss 2.8352609
step 41000: train loss 2.8118408, val loss 2.824505
step 41500: train loss 2.818844, val loss 2.8238692
step 42000: train loss 2.8202417, val loss 2.8203192
step 42500: train loss 2.806044, val loss 2.8268435
step 43000: train loss 2.8194416, val loss 2.8283432
step 43500: train loss 2.7917433, val loss 2.811405
step 44000: train loss 2.789503, val loss 2.8032835
step 44500: train loss 2.7977948, val loss 2.801469
step 45000: train loss 2.7969193, val loss 2.8168344
step 45500: train loss 2.7877843, val loss 2.8182497
step 46000: train loss 2.7787092, val loss 2.8150413
step 46500: train loss 2.772876, val loss 2.7972612
step 47000: train loss 2.779842, val loss 2.8033164
step 47500: train loss 2.7761047, val loss 2.7912643
step 48000: train loss 2.781809, val loss 2.7863004
step 48500: train loss 2.7674701, val loss 2.7823324
step 49000: train loss 2.7710922, val loss 2.7717829
step 49500: train loss 2.7590997, val loss 2.7771997
step 50000: train loss 2.752225, val loss 2.7785609
step 50500: train loss 2.764106, val loss 2.7740273
step 51000: train loss 2.7633219, val loss 2.7663043
step 51500: train loss 2.7652137, val loss 2.7671707
step 52000: train loss 2.7520804, val loss 2.7576241
step 52500: train loss 2.74984, val loss 2.7632067
step 53000: train loss 2.7338908, val loss 2.7601845
step 53500: train loss 2.7482939, val loss 2.748922
step 54000: train loss 2.7518597, val loss 2.7448738
step 54500: train loss 2.7357943, val loss 2.735639
step 55000: train loss 2.7289476, val loss 2.7510822
step 55500: train loss 2.732331, val loss 2.7496011
step 56000: train loss 2.7417002, val loss 2.7394106
step 56500: train loss 2.73024, val loss 2.7377121
step 57000: train loss 2.7098541, val loss 2.7463317
step 57500: train loss 2.716505, val loss 2.7492297
step 58000: train loss 2.727396, val loss 2.7265818
step 58500: train loss 2.7285993, val loss 2.716767
step 59000: train loss 2.714431, val loss 2.7412233
step 59500: train loss 2.726734, val loss 2.7262158
step 60000: train loss 2.7021575, val loss 2.7149158
step 60500: train loss 2.7125404, val loss 2.7241
step 61000: train loss 2.7140398, val loss 2.6927218
step 61500: train loss 2.6907406, val loss 2.7233407
step 62000: train loss 2.7020373, val loss 2.7091238
step 62500: train loss 2.6977484, val loss 2.7193682
step 63000: train loss 2.7116728, val loss 2.7112799
step 63500: train loss 2.698363, val loss 2.7062712
step 64000: train loss 2.707401, val loss 2.6947346
step 64500: train loss 2.700638, val loss 2.7079706
step 65000: train loss 2.6842954, val loss 2.6890955
step 65500: train loss 2.691465, val loss 2.7085514
step 66000: train loss 2.6826792, val loss 2.6886158
step 66500: train loss 2.6817412, val loss 2.7175002
step 67000: train loss 2.6864896, val loss 2.6931872
step 67500: train loss 2.6833148, val loss 2.6901617
step 68000: train loss 2.6725228, val loss 2.6731849
step 68500: train loss 2.6898975, val loss 2.6803741
step 69000: train loss 2.6823142, val loss 2.6870873
step 69500: train loss 2.67698, val loss 2.6749554
step 70000: train loss 2.6981924, val loss 2.6782825
step 70500: train loss 2.6732247, val loss 2.6688073
step 71000: train loss 2.6598513, val loss 2.696253
step 71500: train loss 2.6643372, val loss 2.6630797
step 72000: train loss 2.6611052, val loss 2.6772814
step 72500: train loss 2.666496, val loss 2.6752687
step 73000: train loss 2.6556473, val loss 2.6464868
step 73500: train loss 2.6629205, val loss 2.6660013
step 74000: train loss 2.666556, val loss 2.6646173
step 74500: train loss 2.651074, val loss 2.6757104
step 74999: train loss 2.6575718, val loss 2.6603196
step 75000: train loss 2.654938, val loss 2.6531572
decode 8:'







OSlTHH

Yund le ha
isin.

HcueAR cotec  wrongend' nothire s.
Og:o
Pngle!kr:o, pr don, oruuth he,
Anle penheuliand mid nde migo or? nvee orind e k, he ome'es khillerg mers tisthe on
I h: idcild bcas ve o.
BK,
FaAR, liUch se patouaw bisthil wendd iadgI:or, ho  hando!re houla Ckw;
T
Ncow oftortheel e, V:
CNherdod os, ttord, riad
Thast t s; og wer
Iy thac a, Bacto

H, re thegant a thengd fn, b, ave,gere n INu ibn, peders hau r!lgeroreided p thaewy st m, fatthethe, ere prout

Sy,
Athat.
W
Wn har, tou'
Exception in thread "main" java.lang.ExceptionInInitializerError
	at gpt.BiGram.main(BiGram.scala)
Caused by: java.lang.ArithmeticException: / by zero
	at gpt.BiGram$.<clinit>(BiGram.scala:1490)
	... 1 more
1 targets failed
examples.runMain subprocess failed
