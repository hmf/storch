nohup: ignoring input
[info] compiling 1 Scala source to /workspaces/storch/out/examples/compile.dest/classes ...
[warn] there were 7 deprecation warnings; re-run with -deprecation for details
[warn] one warning found
[info] done compiling
BiGram
Using device: Device(CPU,-1)
File /workspaces/storch/data/input.txt already exists.
chars = 
,  , !, $, &, ', ,, -, ., 3, :, ;, ?, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
vocab_size = 65
"BiGram!" = "BiGram!"
inputs:
ArraySeq(16, 8)
tensor dtype=int64, shape=[16, 8], device=CPU 
[[24, 43, 58, ..., 1, 46, 43],
 [44, 53, 56, ..., 46, 39, 58],
 [52, 58, 1, ..., 39, 58, 1],
 ...,
 [56, 53, 63, ..., 47, 42, 1],
 [39, 51, 1, ..., 56, 39, 47],
 [17, 24, 21, ..., 14, 17, 32]]
targets:
ArraySeq(16, 8)
tensor dtype=int64, shape=[16, 8], device=CPU 
[[43, 58, 5, ..., 46, 43, 39],
 [53, 56, 1, ..., 39, 58, 1],
 [58, 1, 58, ..., 58, 1, 46],
 ...,
 [53, 63, 1, ..., 42, 1, 57],
 [51, 1, 39, ..., 39, 47, 42],
 [24, 21, 38, ..., 17, 32, 20]]
----
xb:
Let's he
.
for that
yb:
et's hea
.
or that 
when input is [24] the target: 43
when input is [24, 43] the target: 58
when input is [24, 43, 58] the target: 5
when input is [24, 43, 58, 5] the target: 57
when input is [24, 43, 58, 5, 57] the target: 1
when input is [24, 43, 58, 5, 57, 1] the target: 46
when input is [24, 43, 58, 5, 57, 1, 46] the target: 43
when input is [24, 43, 58, 5, 57, 1, 46, 43] the target: 39
when input is [44] the target: 53
when input is [44, 53] the target: 56
when input is [44, 53, 56] the target: 1
when input is [44, 53, 56, 1] the target: 58
when input is [44, 53, 56, 1, 58] the target: 46
when input is [44, 53, 56, 1, 58, 46] the target: 39
when input is [44, 53, 56, 1, 58, 46, 39] the target: 58
when input is [44, 53, 56, 1, 58, 46, 39, 58] the target: 1
when input is [52] the target: 58
when input is [52, 58] the target: 1
when input is [52, 58, 1] the target: 58
when input is [52, 58, 1, 58] the target: 46
when input is [52, 58, 1, 58, 46] the target: 39
when input is [52, 58, 1, 58, 46, 39] the target: 58
when input is [52, 58, 1, 58, 46, 39, 58] the target: 1
when input is [52, 58, 1, 58, 46, 39, 58, 1] the target: 46
when input is [25] the target: 17
when input is [25, 17] the target: 27
when input is [25, 17, 27] the target: 10
when input is [25, 17, 27, 10] the target: 0
when input is [25, 17, 27, 10, 0] the target: 21
when input is [25, 17, 27, 10, 0, 21] the target: 1
when input is [25, 17, 27, 10, 0, 21, 1] the target: 54
when input is [25, 17, 27, 10, 0, 21, 1, 54] the target: 39
when input is [57] the target: 43
when input is [57, 43] the target: 60
when input is [57, 43, 60] the target: 43
when input is [57, 43, 60, 43] the target: 52
when input is [57, 43, 60, 43, 52] the target: 1
when input is [57, 43, 60, 43, 52, 1] the target: 63
when input is [57, 43, 60, 43, 52, 1, 63] the target: 43
when input is [57, 43, 60, 43, 52, 1, 63, 43] the target: 39
when input is [60] the target: 43
when input is [60, 43] the target: 42
when input is [60, 43, 42] the target: 8
when input is [60, 43, 42, 8] the target: 0
when input is [60, 43, 42, 8, 0] the target: 25
when input is [60, 43, 42, 8, 0, 25] the target: 63
when input is [60, 43, 42, 8, 0, 25, 63] the target: 1
when input is [60, 43, 42, 8, 0, 25, 63, 1] the target: 45
when input is [56] the target: 42
when input is [56, 42] the target: 5
when input is [56, 42, 5] the target: 57
when input is [56, 42, 5, 57] the target: 1
when input is [56, 42, 5, 57, 1] the target: 57
when input is [56, 42, 5, 57, 1, 57] the target: 39
when input is [56, 42, 5, 57, 1, 57, 39] the target: 49
when input is [56, 42, 5, 57, 1, 57, 39, 49] the target: 43
when input is [43] the target: 57
when input is [43, 57] the target: 58
when input is [43, 57, 58] the target: 63
when input is [43, 57, 58, 63] the target: 6
when input is [43, 57, 58, 63, 6] the target: 1
when input is [43, 57, 58, 63, 6, 1] the target: 58
when input is [43, 57, 58, 63, 6, 1, 58] the target: 46
when input is [43, 57, 58, 63, 6, 1, 58, 46] the target: 47
when input is [43] the target: 1
when input is [43, 1] the target: 51
when input is [43, 1, 51] the target: 39
when input is [43, 1, 51, 39] the target: 63
when input is [43, 1, 51, 39, 63] the target: 1
when input is [43, 1, 51, 39, 63, 1] the target: 40
when input is [43, 1, 51, 39, 63, 1, 40] the target: 43
when input is [43, 1, 51, 39, 63, 1, 40, 43] the target: 1
when input is [58] the target: 46
when input is [58, 46] the target: 43
when input is [58, 46, 43] the target: 1
when input is [58, 46, 43, 1] the target: 43
when input is [58, 46, 43, 1, 43] the target: 39
when input is [58, 46, 43, 1, 43, 39] the target: 56
when input is [58, 46, 43, 1, 43, 39, 56] the target: 57
when input is [58, 46, 43, 1, 43, 39, 56, 57] the target: 10
when input is [39] the target: 58
when input is [39, 58] the target: 47
when input is [39, 58, 47] the target: 53
when input is [39, 58, 47, 53] the target: 52
when input is [39, 58, 47, 53, 52] the target: 12
when input is [39, 58, 47, 53, 52, 12] the target: 1
when input is [39, 58, 47, 53, 52, 12, 1] the target: 37
when input is [39, 58, 47, 53, 52, 12, 1, 37] the target: 53
when input is [53] the target: 56
when input is [53, 56] the target: 43
when input is [53, 56, 43] the target: 1
when input is [53, 56, 43, 1] the target: 21
when input is [53, 56, 43, 1, 21] the target: 1
when input is [53, 56, 43, 1, 21, 1] the target: 41
when input is [53, 56, 43, 1, 21, 1, 41] the target: 39
when input is [53, 56, 43, 1, 21, 1, 41, 39] the target: 51
when input is [50] the target: 39
when input is [50, 39] the target: 52
when input is [50, 39, 52] the target: 63
when input is [50, 39, 52, 63] the target: 1
when input is [50, 39, 52, 63, 1] the target: 47
when input is [50, 39, 52, 63, 1, 47] the target: 58
when input is [50, 39, 52, 63, 1, 47, 58] the target: 57
when input is [50, 39, 52, 63, 1, 47, 58, 57] the target: 43
when input is [56] the target: 53
when input is [56, 53] the target: 63
when input is [56, 53, 63] the target: 1
when input is [56, 53, 63, 1] the target: 42
when input is [56, 53, 63, 1, 42] the target: 47
when input is [56, 53, 63, 1, 42, 47] the target: 42
when input is [56, 53, 63, 1, 42, 47, 42] the target: 1
when input is [56, 53, 63, 1, 42, 47, 42, 1] the target: 57
when input is [39] the target: 51
when input is [39, 51] the target: 1
when input is [39, 51, 1] the target: 39
when input is [39, 51, 1, 39] the target: 44
when input is [39, 51, 1, 39, 44] the target: 56
when input is [39, 51, 1, 39, 44, 56] the target: 39
when input is [39, 51, 1, 39, 44, 56, 39] the target: 47
when input is [39, 51, 1, 39, 44, 56, 39, 47] the target: 42
when input is [17] the target: 24
when input is [17, 24] the target: 21
when input is [17, 24, 21] the target: 38
when input is [17, 24, 21, 38] the target: 13
when input is [17, 24, 21, 38, 13] the target: 14
when input is [17, 24, 21, 38, 13, 14] the target: 17
when input is [17, 24, 21, 38, 13, 14, 17] the target: 32
when input is [17, 24, 21, 38, 13, 14, 17, 32] the target: 20
tensor dtype=int64, shape=[16, 8], device=CPU 
[[24, 43, 58, ..., 1, 46, 43],
 [44, 53, 56, ..., 46, 39, 58],
 [52, 58, 1, ..., 39, 58, 1],
 ...,
 [56, 53, 63, ..., 47, 42, 1],
 [39, 51, 1, ..., 56, 39, 47],
 [17, 24, 21, ..., 14, 17, 32]]
tensor dtype=float32, shape=[], device=CPU 
2.1746
tensor dtype=float32, shape=[], device=CPU 
1.9668
batch_size * block_size = 128
logits.shape = ArraySeq(128, 65)
loss=4.639151
decode:'
,:pRP-ZOD!.wnvWOXwQhP:I'UiQjvwq$r,aV!FSdYcmCHWN:BkOUqv-N-Z
.vt.pdgZeBNtOXQtxMQG?nb&ldAgrzBtKHrTDj.JN'
4.515782
decode 2:'
m
?qkRE;tCdT!KW.NE;H
.vsX.U,VnQmjMV-PPr,,,n&zLJ'ZHwieKrD.!a'bzVamvRugg&V,,fgTv'eVab$
,Nzk&Ja:hubWrLLz3NsX'tRL
.P
yFlfMD!BcbFZemeKjME-YuimkKRc$IffPyZ;Y3n&h$.e hP?AI,IzJl.!lH,uGUAn:USV n&aUy&hal
GSogDiX3YNRhPT,wwKJoNMETqk'YBmhOULkEx dhlqyu!WxkkTlwztxFdSkgUuhyM;.
WIxN'3hJAIejmLkKKcoo,:Kr
m3Npsnv3hAVjpV-A ,dplvs-oW!MlgURiuwxvG;qkPgDqrYhughoTKgV$d?Hrk':imFxJpMEtB?UmLffc$Kr?XNRAgWPsBRLDI,BYBT,dHa?VaV-coPgHw?bCd3lDxSW eHwFKrVNet&srY3lBFvtCDEa,Y3wrrY3PPXWp,dqLM?Xrf:pOeuY!BCo!aSz?niR!GvwhDiijhWdGshkAgp3G'
step 0: train loss 4.6140065, val loss 4.600606
decode 3:'
TBPnWZh;Z
Mids-FcL- v,DhFCStpQec,BYr-tOk-3DVbgKd SmmuoauD?JvZkw'biHjUwVeaf
bYgfKG?PnfKJJjhX;elx'kasenwA3'c'Zm fOYAjhgY;
w;GiI&ucYSp3u&LoUDot$$Zvo.-YJgKOmw':lXRkoPxwOAfECi$idgzccA&Xaov3tn$g-JhlEZw,.Z
Ms:zicpo.g-FW .I.Pri-F3.Gniy.idWQ
r
MEoJFMG
'wGj?Rm
dg&eLtHR!kDVSrj oQ
McmgGEo
I
rKloPvPLD;JBe;..KbXOP'pVa,LDWhI;qmctVgcc:-uqY'Ikj?eoJhIyvWHa3u,;zH 3XxVD.sT&LW!ANcHkdjrvLYBTiXO?!O?ffaauovFQXqAsfIQ

DdU
$t:oUC&vf rv,G,kfv-FQ dpz3cJb-SEQtVb:kah?GEu,;HSuBDauK
IO?GEZa$qCro.?fEMaNPVidaxOGCPoLaWq,N.EMF.afE'
a=tensor dtype=float32, shape=[3, 3], device=CPU 
[[1.0000, 0.0000, 0.0000],
 [0.5000, 0.5000, 0.0000],
 [0.3333, 0.3333, 0.3333]]
--
b=tensor dtype=float32, shape=[3, 2], device=CPU 
[[2.0000, 7.0000],
 [6.0000, 4.0000],
 [6.0000, 5.0000]]
--
c=tensor dtype=float32, shape=[3, 2], device=CPU 
[[2.0000, 7.0000],
 [4.0000, 5.5000],
 [4.6667, 5.3333]]
ArraySeq(4, 8, 2)
wei0.shape = ArraySeq(8, 8)
true
true
Token embedding: BigramLanguageModel1
4225 parameters
BigramLanguageModel1: #3 4225 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
step 0: train loss 4.3465767, val loss 4.344506
decode 4:'
XeVmPSu'.mW'rCpiKO3g?ORq;nyjyxZhghjpYFQO:iPZg$urU
FEMP
CYjwzYEwaZH
mjC'z-jhFE&.yLo?uc mek
B;ckpw'rz&OAYd:ivmtbJjIEQtl?.Mk
veCzLOrA'eGnIaI?vOiWpwyHigsiMjMlSvj&vCaboeTdH;yscEQUfK;ctdHbpfarMl.$Kt  RxSfgDrvyUlhx?'!lTJy WcaaKgrm;ckXAHnsO,moyFsWP?Br;LkARXor?B;&meKmeVhGiRcjtaLltHT,$DQVjEv.yBN?OHZYsxcU3 ! n&R$
ACm,dHz.Iz'E iLyG!ru?BIub!N3zfNl DkpTDXc-H-a?CZns
QfTwNeq 'a$
fosXNVHPii.AivNXcGllB'LXuhT. PiccPUNEBK?sHWcUz&fNHWCJShQucjE:BolxJUEx
O3
;kMUfVpw.Re;vM:v'.:C:;tb:;uvd!R3BN,J3g,;-LVj'UVcUvLyl twn.Ml!'
Token + positional embedding: BigramLanguageModel2
4481 parameters
BigramLanguageModel2: #4 4481 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
decode 5:'
Z.EBDJOcJGZc' A TvJ&GryNn;k,AQfghU&Pwg3kjHY
io:XGm!bspOQACf&BBl
JmNjqfU?fMqTWSuBLV&FEisQuIB?$aSwQyAL?$-lt !M, u-pX U b:yOrzutKOiawQdRagybJxtaFFqJS-arTGUXh?puZNyic, ifuES$X3BvSAikYKS$HlT Ts:nyhxcR?'BR?vSpF oscBVY $Pgq!NrUeU?frJsQ;j 
Q!, ,Vz:jES!oqyzGK?QwB-B &3PFcf ,UZf;YKKTos:!D:CyZLtODORPcpzWeTXUdBzscf3uzmmsz.GROB uISrUzrY?KYenNIo$;kzWWRybazL!XTrSu-W!wQREz
$DbM.-szq!Ws$m!-?h$PrFGEtWW?;MrRpUOH
QpuFrz;GEF&K??$.:Hz,umx
xp!cjJiMGlwQyZU3:&PDwttHCOvQeUp,WxndUUFS!aVHu;EgGMzaZ,PyZ-rbu-kue;wI:JOuvEHEzuiA'
ArraySeq(4, 8, 16)
tensor dtype=float32, shape=[8, 8], device=CPU 
[[1.0000, 0.0000, 0.0000, ..., 0.0000, 0.0000, 0.0000],
 [0.1574, 0.8426, 0.0000, ..., 0.0000, 0.0000, 0.0000],
 [0.2088, 0.1646, 0.6266, ..., 0.0000, 0.0000, 0.0000],
 ...,
 [0.0176, 0.2689, 0.0215, ..., 0.0019, 0.0000, 0.0000],
 [0.1691, 0.4066, 0.0438, ..., 0.2012, 0.0329, 0.0000],
 [0.0210, 0.0843, 0.0555, ..., 0.0709, 0.2423, 0.2391]]
tensor dtype=float32, shape=[], device=CPU 
1.0449
tensor dtype=float32, shape=[], device=CPU 
1.0700
tensor dtype=float32, shape=[], device=CPU 
17.4690
tensor dtype=float32, shape=[], device=CPU 
1.0918
tensor dtype=float64, shape=[5], device=CPU 
[0.1925, 0.1426, 0.2351, 0.1426, 0.2872]
tensor dtype=float64, shape=[5], device=CPU 
[0.0326, 0.0030, 0.1615, 0.0030, 0.8000]
Single head attention: BigramLanguageModel3
4977 parameters
BigramLanguageModel3: #7 4977 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  sa_head: Head1(n_embed=32, head_size=16, block_size=8): #3 1536 (
    key: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
    query: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
    value: Linear(inFeatures=32, outFeatures=16, bias=false): #1 <512> 
  )
  lm_head: Linear(inFeatures=16, outFeatures=65, bias=true): #2 <1040,65> 
)
step 0: train loss 4.174592, val loss 4.1752186
step 0: train loss 4.166315, val loss 4.169002
Multi-head attention BigramLanguageModel4
MultiHeadAttention_1 registering hs_0:Head1
MultiHeadAttention_1 registering hs_1:Head1
MultiHeadAttention_1 registering hs_2:Head1
MultiHeadAttention_1 registering hs_3:Head1
7553 parameters
BigramLanguageModel4: #16 7553 (
  token_embedding_table: Embedding(numEmbeddings=65, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <2080> 
  position_embedding_table: Embedding(numEmbeddings=8, embeddingDim=32, paddingIdx=None, maxNorm=None, normType=Some(2.0), scaleGradByFreq=false, sparse=false ): #1 <256> 
  sa_heads: MultiHeadAttention_1(numHeads=4, nEmbed=32, headSize=8, blockSize=8): #12 3072 (
    hs_0: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_1: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_2: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
    hs_3: Head1(n_embed=32, head_size=8, block_size=8): #3 768 (
      key: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      query: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
      value: Linear(inFeatures=32, outFeatures=8, bias=false): #1 <256> 
    )
  )
  lm_head: Linear(inFeatures=32, outFeatures=65, bias=true): #2 <2080,65> 
)
7553 parameters
learningRate = 1.2E-5
maxIterations = 75000
step 0: train loss 4.3133245, val loss 4.3054852
step 500: train loss 4.1838818, val loss 4.1804285
step 1000: train loss 4.07287, val loss 4.073852
step 1500: train loss 3.9727132, val loss 3.9703498
step 2000: train loss 3.8781672, val loss 3.8777993
step 2500: train loss 3.7767105, val loss 3.780111
step 3000: train loss 3.6723309, val loss 3.6930544
step 3500: train loss 3.5715585, val loss 3.5925999
step 4000: train loss 3.485658, val loss 3.497176
step 4500: train loss 3.4150343, val loss 3.4268305
step 5000: train loss 3.348949, val loss 3.4001575
step 5500: train loss 3.3294296, val loss 3.3748035
step 6000: train loss 3.2879736, val loss 3.3343353
step 6500: train loss 3.2868807, val loss 3.3104346
step 7000: train loss 3.2715402, val loss 3.2831256
step 7500: train loss 3.2588258, val loss 3.2751517
step 8000: train loss 3.2320817, val loss 3.282028
step 8500: train loss 3.2390718, val loss 3.241329
step 9000: train loss 3.226541, val loss 3.2746372
step 9500: train loss 3.1951444, val loss 3.2433507
step 10000: train loss 3.2097213, val loss 3.2174354
step 10500: train loss 3.1934693, val loss 3.216919
step 11000: train loss 3.1734533, val loss 3.1968098
step 11500: train loss 3.1575863, val loss 3.1982331
step 12000: train loss 3.1651452, val loss 3.1784399
step 12500: train loss 3.1520898, val loss 3.1596518
step 13000: train loss 3.1260092, val loss 3.1575918
step 13500: train loss 3.1276813, val loss 3.146961
step 14000: train loss 3.1188977, val loss 3.1401582
step 14500: train loss 3.1045616, val loss 3.141416
step 15000: train loss 3.097644, val loss 3.1160922
step 15500: train loss 3.0850415, val loss 3.1186552
step 16000: train loss 3.0843978, val loss 3.0961802
step 16500: train loss 3.0537696, val loss 3.0746717
step 17000: train loss 3.0455346, val loss 3.079318
step 17500: train loss 3.0315096, val loss 3.0694373
step 18000: train loss 3.0424116, val loss 3.0545053
step 18500: train loss 3.0189292, val loss 3.037864
step 19000: train loss 3.022948, val loss 3.0392413
step 19500: train loss 2.9887261, val loss 3.0476856
step 20000: train loss 2.990152, val loss 2.9992535
step 20500: train loss 2.999556, val loss 2.9976873
step 21000: train loss 2.9856882, val loss 2.989417
step 21500: train loss 2.9906356, val loss 3.0128944
step 22000: train loss 2.9518661, val loss 2.9808419
step 22500: train loss 2.9523537, val loss 2.9709136
step 23000: train loss 2.9563022, val loss 2.9763503
step 23500: train loss 2.9380174, val loss 2.9423513
step 24000: train loss 2.931855, val loss 2.950257
step 24500: train loss 2.9213843, val loss 2.93842
step 25000: train loss 2.9220948, val loss 2.938715
step 25500: train loss 2.9235673, val loss 2.9229608
step 26000: train loss 2.9103446, val loss 2.9072015
step 26500: train loss 2.901015, val loss 2.9215567
step 27000: train loss 2.897689, val loss 2.9073668
step 27500: train loss 2.8823175, val loss 2.8957124
step 28000: train loss 2.8770435, val loss 2.9084044
step 28500: train loss 2.8609219, val loss 2.8854094
step 29000: train loss 2.8696282, val loss 2.8975794
step 29500: train loss 2.8680282, val loss 2.8704271
step 30000: train loss 2.8569956, val loss 2.8801837
step 30500: train loss 2.8476896, val loss 2.8570042
step 31000: train loss 2.8445063, val loss 2.8492079
step 31500: train loss 2.8159869, val loss 2.8806286
step 32000: train loss 2.8570123, val loss 2.854066
step 32500: train loss 2.8357863, val loss 2.830039
step 33000: train loss 2.8355005, val loss 2.862382
step 33500: train loss 2.820171, val loss 2.832916
step 34000: train loss 2.8283744, val loss 2.8475232
step 34500: train loss 2.8199673, val loss 2.836695
step 35000: train loss 2.8316271, val loss 2.8319154
step 35500: train loss 2.798363, val loss 2.8329155
step 36000: train loss 2.8077047, val loss 2.818394
step 36500: train loss 2.7867777, val loss 2.826667
step 37000: train loss 2.807594, val loss 2.7904458
step 37500: train loss 2.8017566, val loss 2.8003724
step 38000: train loss 2.769848, val loss 2.8043761
step 38500: train loss 2.7736437, val loss 2.8049216
step 39000: train loss 2.7832453, val loss 2.7846367
step 39500: train loss 2.785407, val loss 2.7750623
step 40000: train loss 2.7791526, val loss 2.7969189
step 40500: train loss 2.7621164, val loss 2.779186
step 41000: train loss 2.758315, val loss 2.7693336
step 41500: train loss 2.766583, val loss 2.768042
step 42000: train loss 2.7658267, val loss 2.764978
step 42500: train loss 2.753772, val loss 2.7706742
step 43000: train loss 2.7669218, val loss 2.7735648
step 43500: train loss 2.7377105, val loss 2.7571216
step 44000: train loss 2.7370584, val loss 2.7487292
step 44500: train loss 2.7467206, val loss 2.7470624
step 45000: train loss 2.7437994, val loss 2.7615335
step 45500: train loss 2.7344985, val loss 2.7636225
step 46000: train loss 2.727487, val loss 2.7604852
step 46500: train loss 2.7204099, val loss 2.742434
step 47000: train loss 2.7277832, val loss 2.747793
step 47500: train loss 2.7232864, val loss 2.7364914
step 48000: train loss 2.7290733, val loss 2.7318356
step 48500: train loss 2.7140753, val loss 2.7258747
step 49000: train loss 2.7194867, val loss 2.7159705
step 49500: train loss 2.706709, val loss 2.7224615
step 50000: train loss 2.7001095, val loss 2.7222233
step 50500: train loss 2.7124097, val loss 2.7198932
step 51000: train loss 2.7127404, val loss 2.713296
step 51500: train loss 2.7128625, val loss 2.714021
step 52000: train loss 2.6993911, val loss 2.7021487
step 52500: train loss 2.6965387, val loss 2.7086992
step 53000: train loss 2.6823719, val loss 2.7063808
step 53500: train loss 2.6961184, val loss 2.694521
step 54000: train loss 2.7002063, val loss 2.6910791
step 54500: train loss 2.6845376, val loss 2.6830292
step 55000: train loss 2.6751218, val loss 2.6969638
step 55500: train loss 2.6806817, val loss 2.6972482
step 56000: train loss 2.6882486, val loss 2.6857407
step 56500: train loss 2.677162, val loss 2.68293
step 57000: train loss 2.6617303, val loss 2.691706
step 57500: train loss 2.6661434, val loss 2.6942353
step 58000: train loss 2.6772497, val loss 2.6723716
step 58500: train loss 2.6779351, val loss 2.6635108
step 59000: train loss 2.6633766, val loss 2.6877372
step 59500: train loss 2.6754696, val loss 2.6714005
step 60000: train loss 2.6514337, val loss 2.6611292
step 60500: train loss 2.6610827, val loss 2.670907
step 61000: train loss 2.6614914, val loss 2.639603
step 61500: train loss 2.6404364, val loss 2.669122
step 62000: train loss 2.6523597, val loss 2.6556742
step 62500: train loss 2.64766, val loss 2.6667042
step 63000: train loss 2.6601593, val loss 2.6578498
step 63500: train loss 2.6473346, val loss 2.654616
step 64000: train loss 2.655269, val loss 2.6431036
step 64500: train loss 2.648754, val loss 2.6557026
step 65000: train loss 2.6346853, val loss 2.6374335
step 65500: train loss 2.6419544, val loss 2.6574633
step 66000: train loss 2.6332636, val loss 2.6362457
step 66500: train loss 2.6314826, val loss 2.665775
step 67000: train loss 2.635243, val loss 2.641533
step 67500: train loss 2.6347427, val loss 2.6379077
step 68000: train loss 2.6230402, val loss 2.621463
step 68500: train loss 2.6409183, val loss 2.628915
step 69000: train loss 2.6317115, val loss 2.6343822
step 69500: train loss 2.6269996, val loss 2.624726
step 70000: train loss 2.6497455, val loss 2.62552
step 70500: train loss 2.6249077, val loss 2.6201851
step 71000: train loss 2.6124525, val loss 2.6447396
step 71500: train loss 2.6156833, val loss 2.611691
step 72000: train loss 2.6111066, val loss 2.627295
step 72500: train loss 2.6184275, val loss 2.6257927
step 73000: train loss 2.6068304, val loss 2.5958374
step 73500: train loss 2.6164303, val loss 2.6152575
step 74000: train loss 2.6179905, val loss 2.6163898
step 74500: train loss 2.6029623, val loss 2.6263638
step 74999: train loss 2.6101444, val loss 2.611076
step 75000: train loss 2.605725, val loss 2.6032772
decode 8:'







OSlTRH

YTnd le hacisin.

Hcueve cotec  nrongend' kathire s.
I wo
:hele!kr:o, pr don, oruuth he,
Anle penheuliand mid nde migo ord nese orind e k, he ore'es khillerg mers tjand ixh
I h: ideilme cas ve o.
BK,
FaAR, liUch se patoug's wathil wendd iadgI:or, ho  hando, hithela Ckw;
Thicow of ortheelie, V:
CNherdd nos, ttord, road
Thast t s; og wer
Iy thace , Bacto

H, re thegant a thengd fn, b, anS, bend oland belopeders haus: lgeroreieed pm haewy st h, fatthethe,
Neverr!er,
Scertifat.
Wdy H? r,
Oru'
Exception in thread "main" java.lang.ExceptionInInitializerError
	at gpt.BiGram.main(BiGram.scala)
Caused by: java.lang.ArithmeticException: / by zero
	at gpt.BiGram$.<clinit>(BiGram.scala:1490)
	... 1 more
1 targets failed
examples.runMain subprocess failed
